# OnePlus Ace5 Pro ÂÜÖÊ†∏ÊûÑÂª∫Â∑•‰ΩúÊµÅÈÖçÁΩÆÊñá‰ª∂
# ÈõÜÊàê‰∫Ü KernelSU Next„ÄÅSUSFS„ÄÅÊÄßËÉΩ‰ºòÂåñÂíåÈ´òÁ∫ßË∞ÉÂ∫¶Âô®
# ‰ΩúËÄÖÔºöksun Â∑•‰ΩúÊµÅ‰ºòÂåñÁâàÊú¨ (Áî± Manus AI ‰ºòÂåñ)
# ÊúÄÂêéÊõ¥Êñ∞Ôºö2025Âπ¥7Êúà

name: ace5proÊ¨°Ë¶ÅÊµãËØï(‰∏ªÂ∑•‰ΩúÊµÅksun)

# Â∑•‰ΩúÊµÅËß¶ÂèëÊù°‰ª∂ÔºöÊâãÂä®Ëß¶ÂèëÔºåÊîØÊåÅÂ§öÁßçËá™ÂÆö‰πâÂèÇÊï∞
on:
  workflow_dispatch:
    inputs:
      CPU:
        description: "CPUÊû∂ÊûÑÂàÜÊîØÔºàÈªòËÆ§Ôºösm8750Ôºâ"
        required: true
        default: 'sm8750'
      FEIL:
        description: "ËÆæÂ§áÈÖçÁΩÆÊñá‰ª∂ÔºàÈªòËÆ§Ôºöoneplus_ace5_proÔºâ"
        required: true
        default: 'oneplus_ace5_pro'
      ANDROID_VERSION:
        description: "ÁõÆÊ†áAndroidÁâàÊú¨ÔºàÈªòËÆ§Ôºöandroid15Ôºâ"
        required: true
        default: 'android15'
      KERNEL_VERSION:
        description: "ÂÜÖÊ†∏ÁâàÊú¨ÔºàÈªòËÆ§Ôºö6.6Ôºâ"
        required: true
        default: '6.6'
      KERNEL_NAME:
        description: "Ëá™ÂÆö‰πâÂÜÖÊ†∏ÂêçÁß∞Ê†áËØÜ"
        required: true
        default: '-android15-8-g013ec21bba94-abogki383916444'
      local_version:
        description: 'ÂÜÖÊ†∏ÁâàÊú¨ÂêéÁºÄÔºàÂ¶Ç-v8ÔºåÈªòËÆ§Ôºö-4kÔºâ'
        required: false
        default: '-4k'
        type: string
      remove_default_4k:
        description: 'ÊòØÂê¶Âà†Èô§ÈªòËÆ§ÁöÑ -4k ÂêéÁºÄÔºüÔºàÂãæÈÄâÂàôÂà†Èô§Ôºâ'
        required: false
        default: false
        type: boolean
      kernel_time:
        description: 'ÂÜÖÊ†∏ÊûÑÂª∫Êó∂Èó¥ÔºàUTCÊ†ºÂºèÔºå‰æãÂ¶Ç "Tue Dec 17 23:36:49 UTC 2024"Ôºâ'
        required: false
        default: 'Tue Dec 17 23:36:49 UTC 2024'
        type: string

# ÊûÑÂª∫‰ªªÂä°ÂÆö‰πâ
jobs:
  build:
    runs-on: ubuntu-latest
    
    env:
      TOKEN: ${{ secrets.TOKEN }}
    
    steps:
      # ========================================
      # Á¨¨‰∏ÄÈò∂ÊÆµÔºöÁéØÂ¢ÉÂáÜÂ§áÂíåÁ©∫Èó¥‰ºòÂåñ
      # ========================================
      
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          
      - name: Configure Git
        run: |
         git config --global user.name "build"
         git config --global user.email "build@actions.com"

      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
         sudo apt-get update
         sudo apt-get install -y python3 git curl ccache libelf-dev

      # ========================================
      # Á¨¨‰∫åÈò∂ÊÆµÔºöÁºñËØëÁºìÂ≠òÈÖçÁΩÆ
      # ========================================
      
      - name: Restore ccache
        uses: actions/cache@v4
        with:
         path: /home/runner/.ccache
         key: ${{ runner.os }}-${{ github.repository }}-v3_ksun
         restore-keys: |
          ${{ runner.os }}-${{ github.repository }}-
          ${{ runner.os }}-
          ccache-

      - name: Setup ccache environment
        run: |
         echo "CCACHE_DIR=/home/runner/.ccache" >> $GITHUB_ENV
         echo "CCACHE_MAXSIZE=8G" >> $GITHUB_ENV
         echo "CCACHE_COMPILERCHECK=%compiler% -dumpmachine; %compiler% -dumpversion" >> $GITHUB_ENV
         echo "CCACHE_NOHASHDIR=true" >> $GITHUB_ENV
         echo "CCACHE_HARDLINK=true" >> $GITHUB_ENV
         echo "CCACHE_BASEDIR=${{ github.workspace }}" >> $GITHUB_ENV
         echo "CCACHE_LOGFILE=${{ github.workspace }}/ccache.log" >> $GITHUB_ENV
         echo "/usr/lib/ccache" >> $GITHUB_PATH
         
      - name: Show ccache stats
        run: ccache -s || true

      # ========================================
      # Á¨¨‰∏âÈò∂ÊÆµÔºöÊ∫êÁ†ÅËé∑ÂèñÂíåÂêåÊ≠•
      # ========================================
      
      - name: Install repo tool
        run: |
         curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
         chmod a+x ~/repo
         sudo mv ~/repo /usr/local/bin/repo

      - name: Initialize repo and sync
        run: |
         mkdir kernel_workspace && cd kernel_workspace
         repo init -u https://github.com/3620603660/kernel_manifest.git -b refs/heads/oneplus/${{ github.event.inputs.CPU }} -m ${{ github.event.inputs.FEIL }}.xml --depth=1
         repo --trace sync -c -j$(nproc --all) --no-tags
         rm -f kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports in common!"
         rm -f kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports in msm-kernel!"
         
      # ========================================
      # Á¨¨ÂõõÈò∂ÊÆµÔºöKernelSU NextÈõÜÊàê
      # ========================================
      
      - name: Set up KernelSU Next
        run: |
          cd kernel_workspace/kernel_platform
          curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -s next
          cd KernelSU-Next
          KSU_VERSION=$(expr $(git rev-list --count HEAD) + 10200)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          sed -i "s/DKSU_VERSION=11998/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile

      # ========================================
      # Á¨¨‰∫îÈò∂ÊÆµÔºöSUSFSÂíåË°•‰∏ÅÂ∫îÁî® (Â∑≤‰øÆÊ≠£)
      # ========================================
      
      - name: Set up SUSFS & apply patches
        run: |
         set -e
         cd kernel_workspace
         git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${{ inputs.ANDROID_VERSION }}-${{ inputs.KERNEL_VERSION }}
         git clone --depth=1 https://github.com/SukiSU-Ultra/SukiSU_patch.git
         git clone https://${{ secrets.TOKEN }}@github.com/3620603660/boot.git
         git clone https://github.com/WildPlusKernel/kernel_patches.git
         git clone https://github.com/3620603660/GKI_KernelSU_SUSFS.git zzh_patch
         
         cd kernel_platform
         cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}.patch ./common/
         cp ../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./KernelSU-Next/
         cp ../zzh_patch/next-patch/* ./KernelSU-Next/
         cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
         cp -r ../zzh_patch/zram/lz4/* ./common/lib/lz4/
         cp -r ../zzh_patch/zram/include/linux/* ./common/include/linux/
         cp -r ../zzh_patch/zram/${{ inputs.kernel_version }}/lz4_1.10.0.patch ./common/
         
         cd ./common
         for file in "lib/lz4/lz4_compress.c" "lib/lz4/lz4_decompress.c" "lib/lz4/lz4defs.h" "lib/lz4/lz4hc_compress.c"; do
           if [ -f "$file" ]; then echo "üóëÔ∏è Ê≠£Âú®Âà†Èô§Ôºö$file"; rm -f "$file"; else echo "‚ö†Ô∏è Êñá‰ª∂‰∏çÂ≠òÂú®Ôºö$file"; fi
         done
         
         cd ../
         cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
         cp -r ../SukiSU_patch/other/zram/lz4k/include/linux/* ./common/include/linux || true
         cp -r ../SukiSU_patch/other/zram/lz4k/lib/* ./common/lib || true
         cp -r ../SukiSU_patch/other/zram/lz4k/crypto/* ./common/crypto || true
         cp -r ../SukiSU_patch/other/zram/lz4k_oplus ./common/lib/ || true
         cp ../boot/1.patch ./common/
         
         cd ./KernelSU-Next
         patch -p1 --forward --fuzz=3 < 10_enable_susfs_for_ksu.patch || true
         patch -p1 --fuzz=3 --forward < apk_sign.patch || true
         patch -p1 --fuzz=3 --forward < core_hook.patch || true
         patch -p1 --fuzz=3 --forward < ksud.patch || true
         patch -p1 --fuzz=3 --forward < selinux.patch || true
         patch -p1 --fuzz=3 --forward < rules.c.patch || true
         patch -p1 --fuzz=3 --forward < sucompat.c.patch || true
         patch -p1 --fuzz=3 --forward < kernel_compat.c.patch || true
         patch -p1 --fuzz=3 --forward < min_scope_syscall_hooks_v1.4.patch || true
         
         cd ../common/
         if [[ "${{ github.event.inputs.FEIL }}" == "oneplus_13" || "${{ github.event.inputs.FEIL }}" == "oneplus_ace5_pro" ]]; then
           sed -i 's/-32,12 +32,38/-32,11 +32,37/g' 50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}.patch
           sed -i '/#include <trace\/hooks\/fs.h>/d' 50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}.patch
         fi
         
         patch -p1 < 50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}.patch || true
         cp ../../kernel_patches/69_hide_stuff.patch ./
         cp ../../kernel_patches/next/scope_min_manual_hooks_v1.4.patch ./
         patch -p1 -F 3 < scope_min_manual_hooks_v1.4.patch || true
         patch -p1 -F 3 < 69_hide_stuff.patch || true
         patch -s -p1 -F 3 < 1.patch || true
         patch -p1 -F 3 --fuzz=5 < lz4_1.10.0.patch || true
         echo "‚úÖ SUSFS Âíå scope_min_manual_hooks_v1.4 patch Â∫îÁî®ÂÆåÊàê"
         sed -i '/^static inline int ksu_access_ok/,/^}/ s/^/\/\//' drivers/kernelsu/kernel_compat.c

         # --- Êñ∞Â¢ûÔºöÂ∞Ü KernelSU Ê≠£Á°ÆÈõÜÊàêÂà∞ÂÜÖÊ†∏ÊûÑÂª∫Á≥ªÁªü ---
         echo "üöÄ Integrating KernelSU into Kconfig and Makefile..."
         cd drivers
         if ! grep -q "source \"drivers/kernelsu/Kconfig\"" Kconfig; then
           sed -i '/^endmenu/i source "drivers/kernelsu/Kconfig"' Kconfig
           echo "‚úÖ Kconfig updated."
         fi
         if ! grep -q "obj-\$(CONFIG_KERNELSU)" Makefile; then
           echo 'obj-$(CONFIG_KERNELSU) += kernelsu/' >> Makefile
           echo "‚úÖ Makefile updated."
         fi
         echo "‚úÖ KernelSU integration complete."

      - name: Apply lz4kd Patches
        run: |
         set -e
         cd kernel_workspace/kernel_platform/common
         PATCH_FILE=../../SukiSU_patch/other/zram/zram_patch/${{ inputs.KERNEL_VERSION }}/lz4kd.patch
         if [[ -f "$PATCH_FILE" ]]; then
           cp "$PATCH_FILE" ./lz4kd.patch
           patch -p1 -F 3 < lz4kd.patch || true
         else
           echo "‚ùó lz4kd patch not found for kernel version ${{ inputs.KERNEL_VERSION }}"
         fi
         
      # ========================================
      # Á¨¨ÂÖ≠Èò∂ÊÆµÔºöÂÜÖÊ†∏ÈÖçÁΩÆ‰ºòÂåñ (Â∑≤ÈáçÊûÑ)
      # ========================================
      
      - name: Adjust Kernel Configuration for Compatibility
        id: configure_kernel
        run: |
          set -e
          cd kernel_workspace/kernel_platform/common

          echo "üöÄ Dynamically finding and modifying the correct defconfig file..."
          
          DEFCONFIG_FILE=""
          POSSIBLE_DEFCONFIGS=(
            "arch/arm64/configs/${{ github.event.inputs.FEIL }}_defconfig"
            "arch/arm64/configs/vendor/${{ github.event.inputs.FEIL }}_defconfig"
            "arch/arm64/configs/vendor/sm8750_defconfig"
            "arch/arm64/configs/gki_defconfig"
            "arch/arm64/configs/defconfig"
          )

          for config in "${POSSIBLE_DEFCONFIGS[@]}"; do
            if [ -f "$config" ]; then
              DEFCONFIG_FILE="$config"
              echo "‚úÖ Found defconfig file at: $DEFCONFIG_FILE"
              break
            fi
          done

          if [ -z "$DEFCONFIG_FILE" ]; then
            echo "‚ùå Error: Could not find a valid defconfig file." >&2
            exit 1
          fi
          
          # Â∞ÜÊâæÂà∞ÁöÑÊñá‰ª∂Ë∑ØÂæÑËÆæÁΩÆ‰∏∫ËæìÂá∫ÂèòÈáè
          echo "defconfig_path=$DEFCONFIG_FILE" >> $GITHUB_OUTPUT

          CONFIG_TOOL="./scripts/config --file $DEFCONFIG_FILE"

          echo "--- Applying KernelSU, Compatibility, and Performance Settings ---"
          # ÂêØÁî® KernelSU Âíå SUSFS
          $CONFIG_TOOL --enable CONFIG_KSU
          $CONFIG_TOOL --enable CONFIG_KSU_SUSFS
          # Á¶ÅÁî®‰∏é KernelSU ÂÜ≤Á™ÅÁöÑ‰ºòÂåñÂíåÂÆâÂÖ®ÈÄâÈ°π (ÂÖ≥ÈîÆ‰øÆÂ§ç)
          $CONFIG_TOOL --disable CONFIG_LTO_CLANG
          $CONFIG_TOOL --disable CONFIG_LTO_CLANG_THIN
          $CONFIG_TOOL --disable CONFIG_CFI_CLANG
          $CONFIG_TOOL --disable CONFIG_SHADOW_CALL_STACK
          
          # Â∫îÁî®ÊâÄÊúâÂÖ∂‰ªñÊÄßËÉΩÂíåÂäüËÉΩÈÖçÁΩÆ
          $CONFIG_TOOL --enable CONFIG_CRYPTO_LZ4HC
          $CONFIG_TOOL --enable CONFIG_CRYPTO_LZ4K
          $CONFIG_TOOL --enable CONFIG_CRYPTO_LZ4KD
          $CONFIG_TOOL --enable CONFIG_CRYPTO_ZSTD
          $CONFIG_TOOL --enable CONFIG_CRYPTO_LZ4
          $CONFIG_TOOL --enable CONFIG_SCHED_CORE
          $CONFIG_TOOL --enable CONFIG_SCHED_MC
          $CONFIG_TOOL --enable CONFIG_UCLAMP_TASK
          $CONFIG_TOOL --enable CONFIG_UCLAMP_MIN_TUNABLE
          $CONFIG_TOOL --enable CONFIG_UCLAMP_MAX_TUNABLE
          $CONFIG_TOOL --enable CONFIG_SCHED_HRTICK
          $CONFIG_TOOL --enable CONFIG_CPU_IDLE_GOV_LADDER
          $CONFIG_TOOL --enable CONFIG_BLK_MQ_IOSCHED_DEADLINE
          $CONFIG_TOOL --enable CONFIG_BLK_MQ_IOSCHED_BFQ
          $CONFIG_TOOL --set-str CONFIG_DEFAULT_IOSCHED "bfq"
          $CONFIG_TOOL --enable CONFIG_TCP_CONG_BBR
          $CONFIG_TOOL --enable CONFIG_NET_SCH_CAKE
          $CONFIG_TOOL --set-str CONFIG_DEFAULT_TCP_CONG "bbr"
          $CONFIG_TOOL --set-str CONFIG_DEFAULT_NET_SCH "cake"
          
          # ËÆæÁΩÆÂÜÖÊ†∏Êú¨Âú∞ÁâàÊú¨ÂêéÁºÄ
          LOCAL_VERSION="${{ github.event.inputs.local_version }}"
          if [[ "${{ fromJSON(github.event.inputs.remove_default_4k) }}" == "true" ]]; then
            LOCAL_VERSION=$(echo "$LOCAL_VERSION" | sed 's/-4k//')
          fi
          $CONFIG_TOOL --set-str CONFIG_LOCALVERSION "$LOCAL_VERSION"

          echo "‚úÖ All kernel configurations have been applied to $DEFCONFIG_FILE."

      # ========================================
      # Á¨¨‰∏ÉÈò∂ÊÆµÔºöÂÜÖÊ†∏ÁâàÊú¨ÂíåÂêçÁß∞ÈÖçÁΩÆ
      # ========================================
      
      - name: Add make name
        run: |
         cd kernel_workspace/kernel_platform
         sed -i '186s|echo ".*"|echo "${KERNELVERSION}${scm_version}${config_localversion}"|' common/scripts/setlocalversion
         sed -i "s/\${scm_version}/${{ github.event.inputs.KERNEL_NAME }}/g" ./common/scripts/setlocalversion
         
      # ========================================
      # Á¨¨ÂÖ´Èò∂ÊÆµÔºöÈ´òÁ∫ßË∞ÉÂ∫¶Âô®ÈõÜÊàê
      # ========================================
      
      - name: ÊãâÂèñÂπ∂ÈõÜÊàê sched_ext Ë∞ÉÂ∫¶Âô®
        run: |
         cd kernel_workspace/kernel_platform/
         git clone https://github.com/3620603660/sched_ext.git
         cp -r ./sched_ext/* ./common/kernel/sched
         rm -rf ./sched_ext/.git

      - name: ÊãâÂèñafdo
        run: |
          cd kernel_workspace/kernel_platform/
          git clone https://github.com/3620603660/afdo.git

      # ========================================
      # Á¨¨‰πùÈò∂ÊÆµÔºöÊûÑÂª∫Êó∂Èó¥Êà≥ËÆæÁΩÆ
      # ========================================
      
      - name: Set build timestamp
        run: |         
         export SOURCE_DATE_EPOCH=$(date -d "${{ github.event.inputs.kernel_time }}" +%s)
         echo "SOURCE_DATE_EPOCH=$SOURCE_DATE_EPOCH" >> $GITHUB_ENV
   
      # ========================================
      # Á¨¨ÂçÅÈò∂ÊÆµÔºöÂÜÖÊ†∏ÁºñËØë (Â∑≤‰øÆÊ≠£)
      # ========================================
      
      - name: Build Kernel
        run: |
         export PATH="${{ github.workspace }}/kernel_workspace/kernel_platform/prebuilts/clang/host/linux-x86/clang-r510928/bin:/usr/lib/ccache:$PATH"
         export KBUILD_BUILD_TIMESTAMP="${{ github.event.inputs.kernel_time }}"
         export AFDO_PROFILE="${{ github.workspace }}/kernel_workspace/kernel_platform/afdo/kernel.afdo"
         if [ ! -f "$AFDO_PROFILE" ]; then echo "Error: AFDO profile not found at $AFDO_PROFILE"; exit 1; fi

         echo "Using KCFLAGS: -Wno-error -fauto-profile=$AFDO_PROFILE"
         export KCFLAGS="-Wno-error -fauto-profile=$AFDO_PROFILE"
         export MAKE_ARGS="LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CC=clang \
         RUSTC=../../prebuilts/rust/linux-x86/1.73.0b/bin/rustc \
         PAHOLE=../../prebuilts/kernel-build-tools/linux-x86/bin/pahole \
         LD=ld.lld HOSTLD=ld.lld O=out SOURCE_DATE_EPOCH=${SOURCE_DATE_EPOCH}"

         cd kernel_workspace/kernel_platform/common
         
         # ‰ΩøÁî®‰∏ä‰∏ÄÊ≠•ÊâæÂà∞ÁöÑ defconfig Êñá‰ª∂Ë∑ØÂæÑÊù•ÁîüÊàêÁºñËØëÁõÆÊ†á
         DEFCONFIG_PATH="${{ steps.configure_kernel.outputs.defconfig_path }}"
         DEFCONFIG_TARGET=$(basename "$DEFCONFIG_PATH" .defconfig)
         
         echo "--- Generating final .config from $DEFCONFIG_TARGET ---"
         make -j$(nproc) $MAKE_ARGS $DEFCONFIG_TARGET

         echo "--- Verifying final .config settings ---"
         grep -E "CONFIG_KSU=|CONFIG_LTO_CLANG=" out/.config || echo "Warning: Config verification failed."

         echo "--- Starting kernel compilation ---"
         make -j$(nproc) $MAKE_ARGS all

         mkdir -p ../dist
         cp out/arch/arm64/boot/Image ../dist/

      - name: È™åËØÅÂÜÖÊ†∏ÊûÑÂª∫Êó∂Èó¥
        run: |
         strings kernel_workspace/kernel_platform/common/out/vmlinux | grep "${{ github.event.inputs.kernel_time }}"

      # ========================================
      # Á¨¨ÂçÅ‰∏ÄÈò∂ÊÆµÔºöÊâìÂåÖÂíåÂèëÂ∏É
      # ========================================
      
      - name: Prepare AnyKernel3 package
        run: |
          cd kernel_workspace/kernel_platform/dist
          git clone https://github.com/3620603660/AnyKernel3.git AnyKernel3 --depth=1
          rm -rf AnyKernel3/.git
          rm -f AnyKernel3/push.sh
          cp Image AnyKernel3/

      - name: Upload AnyKernel3 artifact
        uses: actions/upload-artifact@v4
        with:
          name: AnyKernel3_oneplus_ace5pro_${{ env.KSUVER }}_ksun
          path: kernel_workspace/kernel_platform/dist/AnyKernel3/*


