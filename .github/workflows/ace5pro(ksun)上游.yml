name: ace5pro(ksun)合并上游6.6.10X
on:
  workflow_dispatch:
    inputs:
      CPU:
        description: "分支"
        required: true
        default: 'sm8750'
      FEIL:
        description: "配置文件"
        required: true
        default: 'oneplus_ace5_pro_pro'
      ANDROID_VERSION:
        description: "内核安卓版本"
        required: true
        default: 'android15'
      KERNEL_VERSION:
        description: "内核版本"
        required: true
        default: '6.6'
      KERNEL_NAME:
        description: "修改内核名称"
        required: true
        default: '-android15-8-g29d86c5fc9dd-abogki428889875'
      local_version:
        description: '输入内核后缀名（如-v8）'
        required: false
        default: '-4k'
        type: string
      remove_default_4k:
        description: '是否删除默认的 -4k 后缀？（勾选则删除）'
        required: false
        default: false
        type: boolean
      kernel_time:
        description: '内核构建时间（UTC 时间字符串，例如 "Mon May 12 09:09:59 UTC 2025"）'
        required: false
        default: 'Tue Jul  1 19:48:18 UTC 2025'
        type: string
      KernelSU_Nex_tag:
        description: "自定义版本来源后缀（如:见清）"
        required: false
        default: "-by-Ciallo～(∠・ω< )⌒⭐"
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      TOKEN: ${{ secrets.TOKEN }}
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          
      - name: Configure Git
        run: |
         git config --global user.name "build"
         git config --global user.email "3620603660@qq.com"

      # 1. 拉取仓库  
      - name: Checkout  
        uses: actions/checkout@v4  

      # 2. 安装构建依赖（包括 ccache）  
      - name: Install Dependencies  
        run: |  
         sudo apt-get update  
         sudo apt-get install -y python3 git curl ccache libelf-dev  

      # 3. 恢复 ccache 缓存  
      - name: Restore ccache
        uses: actions/cache@v3
        with:
         path: /home/runner/.ccache
         key: ${{ runner.os }}-${{ github.repository }}-v1_ksun
         restore-keys: |
          ${{ runner.os }}-${{ github.repository }}-
          ${{ runner.os }}-
          ccache-

      # 4. 设置 ccache 环境变量  
      - name: Setup ccache environment  
        run: |  
         echo "CCACHE_DIR=/home/runner/.ccache" >> $GITHUB_ENV  
         echo "CCACHE_MAXSIZE=8G" >> $GITHUB_ENV  
         echo "CCACHE_COMPILERCHECK=%compiler% -dumpmachine; %compiler% -dumpversion" >> $GITHUB_ENV  
         echo "CCACHE_NOHASHDIR=true" >> $GITHUB_ENV  
         echo "CCACHE_HARDLINK=true" >> $GITHUB_ENV  
         echo "CCACHE_BASEDIR=${{ github.workspace }}" >> $GITHUB_ENV  
         echo "CCACHE_LOGFILE=${{ github.workspace }}/ccache.log" >> $GITHUB_ENV  
         echo "/usr/lib/ccache" >> $GITHUB_PATH  
         
      - name: Show ccache stats
        run: |
         ccache -s || true

      - name: Install repo tool
        run: |
         curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
         chmod a+x ~/repo
         sudo mv ~/repo /usr/local/bin/repo

      - name: Initialize repo and sync
        run: |
         mkdir kernel_workspace && cd kernel_workspace
         repo init -u https://github.com/3620603660/kernel_manifest.git -b refs/heads/oneplus/${{ github.event.inputs.CPU }} -m ${{ github.event.inputs.FEIL }}.xml --depth=1
         repo --trace sync -c -j$(nproc --all) --no-tags
         rm kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
         rm kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"

      - name: Export suffix
        run: |
          echo "TAG_SUFFIX=${{ github.event.inputs.KernelSU_Nex_tag }}" >> $GITHUB_ENV
          
      - name: Setup KernelSU-Next
        run: |
          cd kernel_workspace/kernel_platform
          curl -LSs "https://raw.githubusercontent.com/pershoot/KernelSU-Next/next-susfs/kernel/setup.sh" | bash -s next-susfs
          cd KernelSU-Next

          # 获取 next 分支 commit 数量并加上 10200
          KSU_VERSION=$(expr $(curl -sI "https://api.github.com/repos/KernelSU-Next/KernelSU-Next/commits?sha=next&per_page=1" \
            | grep -i "link:" \
            | sed -n 's/.*page=\([0-9]*\)>; rel="last".*/\1/p') "+" 10200)

          {
            echo "KSUVER<<EOF"
            echo "${KSU_VERSION}"
            echo "EOF"
          } >> $GITHUB_ENV

          sed -i "s/DKSU_VERSION=11998/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile

          # 获取最近的 tag (例: v1.1.1)
          TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")

          # 拼接 tag+后缀（后缀来自 Export suffix 步骤注入）
          CUSTOM_TAG="${TAG}${TAG_SUFFIX}"

          {
            echo "KSUTAG<<EOF"
            echo "${CUSTOM_TAG}"
            echo "EOF"
          } >> $GITHUB_ENV

          # 替换 Makefile 里的默认 DKSU_VERSION_TAG
          sed -i "s|^\s*KSU_VERSION_TAG :=.*|KSU_VERSION_TAG := ${CUSTOM_TAG}|" kernel/Makefile
          
          # 打印确认
          echo "👉 KernelSU-Next Tag = ${CUSTOM_TAG}"
          
      - name: Set up SUSFS & apply patches
        run: |
         set -e
         cd kernel_workspace
         git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${{ github.event.inputs.ANDROID_TARGET_VERSION }}-${{ github.event.inputs.KERNEL_BASE_VERSION }}
         git clone --depth=1 https://github.com/SukiSU-Ultra/SukiSU_patch.git
         git clone https://$TOKEN@github.com/3620603660/boot.git
         git clone https://github.com/WildPlusKernel/kernel_patches.git
         git clone https://github.com/PxxPei/GKI_KernelSU_SUSFS.git zzh_patch
         cd kernel_platform
         echo "正在拉取susfs补丁"
         cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_TARGET_VERSION }}-${{ github.event.inputs.KERNEL_BASE_VERSION }}.patch ./common/
         cp ../kernel_patches/next/scope_min_manual_hooks_v1.4.patch ./common/
         cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
         cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
         cp ../zzh_patch/next-patch/* ./KernelSU-Next/
         cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
         cp -r ../zzh_patch/zram/lz4/* ./common/lib/lz4/
         cp -r ../zzh_patch/zram/include/linux/* ./common/include/linux/
         cp -r ../zzh_patch/zram/${{ inputs.KERNEL_BASE_VERSION }}/lz4_1.10.0.patch ./common/
         cd ./common
         for file in \
         "lib/lz4/lz4_compress.c" \
         "lib/lz4/lz4_decompress.c" \
         "lib/lz4/lz4defs.h" \
         "lib/lz4/lz4hc_compress.c"
         do
         if [ -f "$file" ]; then
         echo "🗑️ 正在删除：$file"
         rm -f "$file"
         else
         echo "⚠️ 文件不存在：$file"
         fi
         done
         cd ../
         cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
         cp -r ../SukiSU_patch/other/zram/lz4k/include/linux/* ./common/include/linux || true
         cp -r ../SukiSU_patch/other/zram/lz4k/lib/* ./common/lib || true
         cp -r ../SukiSU_patch/other/zram/lz4k/crypto/* ./common/crypto || true
         cp -r ../SukiSU_patch/other/zram/lz4k_oplus ./common/lib/ || true
         cp ../boot/1.patch ./common/
         cd ./common/
         # if [[ "${{ github.event.inputs.DEVICE_CONFIG }}" == "oneplus_13" || "${{ github.event.inputs.DEVICE_CONFIG }}" == "oneplus_ace5_pro" ]]; then
         # sed -i 's/-32,12 +32,38/-32,11 +32,37/g' 50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_TARGET_VERSION }}-${{ github.event.inputs.KERNEL_BASE_VERSION }}.patch
         # sed -i '/#include <trace\/hooks\/fs.h>/d' 50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_TARGET_VERSION }}-${{ github.event.inputs.KERNEL_BASE_VERSION }}.patch
         # fi
          patch -p1 < 50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_TARGET_VERSION }}-${{ github.event.inputs.KERNEL_BASE_VERSION }}.patch || true
          # Replace next_hooks.patch with syscall_hooks.patch
          cp ../../kernel_patches/69_hide_stuff.patch ./
          patch -p1 -F 3 < 69_hide_stuff.patch
          patch -p1 --fuzz=3 < scope_min_manual_hooks_v1.4.patch
          patch -s -p1 -F 3 < 1.patch || true
          patch -p1 -F 3 --fuzz=5 < lz4_1.10.0.patch || true
          echo "✅ SUSFS 和 scope_min_manual_hooks_v1.4 patch 应用完成"
          
      - name: Apply lz4kd Patches
        run: |
         set -e
         cd kernel_workspace/kernel_platform/common
         PATCH_FILE=../../SukiSU_patch/other/zram/zram_patch/${{ inputs.KERNEL_VERSION }}/lz4kd.patch
         if [[ -f "$PATCH_FILE" ]]; then
         cp "$PATCH_FILE" ./lz4kd.patch
         patch -p1 -F 3 < lz4kd.patch || true
         else
         echo "❗ lz4kd patch not found for kernel version ${{ inputs.KERNEL_VERSION }}"
         fi

      - name: 设置内核优化配置
        run: |
          cd ${{ env.KERNEL_PLATFORM_DIR }}
          CONFIG_FILE="./common/arch/arm64/configs/gki_defconfig"
          if [ ! -f "$CONFIG_FILE" ]; then
            echo "Error: 配置文件 $CONFIG_FILE 不存在"
            exit 1
          fi
          cat >> "$CONFIG_FILE" << 'EOF'
          # 优化后的一加Ace5 Pro (骁龙8e, Android 15, Kernel 6.6.10X) 内核配置
          # KernelSU 配置
          CONFIG_KSU=y
          CONFIG_KSU_MANUAL_HOOK=y
          CONFIG_KSU_SUSFS=y
          CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y
          CONFIG_KSU_SUSFS_SUS_PATH=y
          CONFIG_KSU_SUSFS_SUS_MOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y
          CONFIG_KSU_SUSFS_SUS_KSTAT=y
          CONFIG_KSU_SUSFS_TRY_UMOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y
          CONFIG_KSU_SUSFS_SPOOF_UNAME=y
          CONFIG_KSU_SUSFS_ENABLE_LOG=y
          CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y
          CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y
          CONFIG_KSU_SUSFS_OPEN_REDIRECT=y
          CONFIG_KSU_SUSFS_SUS_SU=n
          CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n
          
          # CPU和电源管理
          CONFIG_CPU_FREQ=y
          CONFIG_CPU_FREQ_STAT=y
          CONFIG_CPU_IDLE=y
          CONFIG_PM_WAKELOCKS=y
          CONFIG_PM_WAKELOCKS_GC=y
          CONFIG_SCHED_CORE=y
          CONFIG_SCHED_MC=y
          CONFIG_UCLAMP_TASK=y
          CONFIG_SCHED_HRTICK=y
          CONFIG_CPU_IDLE_GOV_TEO=y
          CONFIG_CPU_FREQ_GOV_SCHEDUTIL=y
          CONFIG_CPU_HOTPLUG=y
          CONFIG_CPU_IDLE_STATE_RESIDENCY=y
          CONFIG_CPU_IDLE_TIME_IN_ACCOUNTING=y
          CONFIG_SCHED_CLASS_EXT=y
          CONFIG_SCHED_TUNE=y # 调度器调优，可根据负载动态调整调度策略
          CONFIG_SCHED_EAS=y # 能源感知调度，进一步优化功耗
          CONFIG_SCHED_WALT=y # WALT调度器，高通推荐，更精确地评估任务负载
          CONFIG_SCHED_UTIL_CLAMP=y # 调度器利用率钳位，限制任务的CPU利用率，有助于省电
          CONFIG_SCHED_THERMAL_PRESSURE=y # 热压力感知调度，避免过热降频
          CONFIG_PM_DOMAIN_CPU_GOV=y
          CONFIG_THERMAL_GOV_POWER_ALLOCATOR=y
          CONFIG_THERMAL_GOV_FAIR_SHARE=y
          CONFIG_CPUFREQ_BOOST=y
          CONFIG_DEVFREQ_BOOST=y
          CONFIG_QCOM_CPU_CLUSTER_POWER_CONTROL=y
          
          # 内存管理
          CONFIG_LRU_GEN=y
          CONFIG_TRANSPARENT_HUGEPAGE=y
          CONFIG_TRANSPARENT_HUGEPAGE_ALWAYS=n # 推荐使用MADVISE模式，避免ALWAYS模式可能带来的性能问题
          CONFIG_TRANSPARENT_HUGEPAGE_MADVISE=y
          CONFIG_ZRAM=y
          CONFIG_ZRAM_LZ4=y
          CONFIG_ZRAM_ZSTD=y
          CONFIG_ZRAM_MULTI_COMP=y
          CONFIG_ANDROID_LOW_MEMORY_KILLER=y
          CONFIG_BLK_DEV_ZRAM_DISCARD=y # zram_bio_discard 优化
          
          # 网络性能优化 (BBR3)
          CONFIG_BQL=y
          CONFIG_INET=y
          CONFIG_IPV6=y
          CONFIG_NET=y
          CONFIG_NET_SCHED=y
          CONFIG_NET_SCH_CAKE=y
          CONFIG_NET_SCH_FQ=y
          CONFIG_NET_SCH_FQ_CODEL=y
          CONFIG_DEFAULT_NET_SCH="cake"
          CONFIG_DEFAULT_TCP_CONG="bbr"
          CONFIG_TCP_CONG_BBR=y
          CONFIG_TCP_FASTOPEN=y
          CONFIG_TCP_SACK=y
          CONFIG_TCP_TIMESTAMPS=y
          # 移除冲突的TCP拥塞算法，仅保留BBR作为默认
          CONFIG_TCP_CONG_BIC=n
          CONFIG_TCP_CONG_CUBIC=n
          CONFIG_TCP_CONG_HTCP=n
          CONFIG_TCP_CONG_WESTWOOD=n
          
          # IO优化配置
          CONFIG_IO_URING=y
          CONFIG_BLK_MQ=y
          CONFIG_BLK_MQ_PCI=y
          CONFIG_MQ_IOSCHED_BFQ=y
          CONFIG_BFQ_GROUP_IOSCHED=y
          CONFIG_BFQ_ALLOC_BATCH=y
          CONFIG_SWAP_ASYNC_IO=y
          CONFIG_PAGE_BOOST=y
          CONFIG_IO_URING_ASYNC=y
          CONFIG_BLK_WBT=y
          CONFIG_BLK_CGROUP_IOCOST=y
          
          # 文件系统压缩支持
          CONFIG_F2FS_FS_LZ4=y
          CONFIG_F2FS_FS_LZ4HC=y
          CONFIG_F2FS_FS_ZSTD=y
          
          # 编译优化
          CONFIG_LTO_CLANG=y
          CONFIG_LTO_CLANG_THIN=y
          CONFIG_LTO_POLLY=y
          
          # Ace 5 Pro特定优化 (6.6.100兼容，优化: 添加NVMe target)
          CONFIG_NVME_MULTIPATH=y
          CONFIG_NVME_TARGET=y
          CONFIG_BT_QCA=y
          CONFIG_ARM64_SME=y # 建议根据硬件支持和需求考虑启用，如果硬件不支持或不需要，可设置为n
          
          EOF
          
          sed -i 's/check_defconfig//' ./common/build.config.gki
          git add -A && git commit -a -m "BUILD Kernel with optimizations" || true
          echo "✅ 内核优化配置已完成"
         
      - name: 设置 CONFIG_LOCALVERSION
        run: |
         cd kernel_workspace/kernel_platform
         echo 'CONFIG_LOCALVERSION="${{ github.event.inputs.local_version }}"' >> ./common/arch/arm64/configs/gki_defconfig

      - name: 删除 CONFIG_LOCALVERSION 中的 -4k 后缀（如果勾选）
        if: ${{ fromJSON(github.event.inputs.remove_default_4k) }}
        run: |
         cd kernel_workspace/kernel_platform
         sed -i 's/-4k//' ./common/arch/arm64/configs/gki_defconfig
    
      - name: 拉取并集成 sched_ext 调度器
        run: |
         cd kernel_workspace/kernel_platform/
         git clone https://github.com/3620603660/sched_ext.git
         cp -r ./sched_ext/* ./common/kernel/sched
         rm -rf ./sched_ext/.git

      - name: 拉取afdo
        run: |
          cd kernel_workspace/kernel_platform/
          git clone https://github.com/PxxPei/afdo.git

      - name: Set build timestamp
        run: |         
         export SOURCE_DATE_EPOCH=$(date -d "Tue Jul  1 19:48:18 UTC 2025" +%s)
         echo "SOURCE_DATE_EPOCH=$SOURCE_DATE_EPOCH" >> $GITHUB_ENV
   
      - name: Build Kernel
        run: |
         # 加入 clang 到 PATH
         export PATH="${{ github.workspace }}/kernel_workspace/kernel_platform/prebuilts/clang/host/linux-x86/clang-r510928/bin:$PATH"
         # 加入 ccache 到 PATH
         export PATH="/usr/lib/ccache:$PATH" 

         # 设置固定内核构建时间
         export KERNEL_TIME="Tue Jul  1 19:48:18 UTC 2025"
         export KBUILD_BUILD_TIMESTAMP="$KERNEL_TIME"
         export SOURCE_DATE_EPOCH=$(date -d "$KERNEL_TIME" +%s)
         # 设置 AFDO 配置文件路径
         export AFDO_PROFILE="${{ github.workspace }}/kernel_workspace/kernel_platform/afdo/kernel.afdo"
         if [ ! -f "$AFDO_PROFILE" ]; then
           echo "Error: AFDO profile not found at $AFDO_PROFILE"
         exit 1
         fi

         # 打印验证
         echo "KERNEL_TIME = $KERNEL_TIME"
         echo "SOURCE_DATE_EPOCH = $SOURCE_DATE_EPOCH"
         echo "Using KCFLAGS: -Wno-error -fauto-profile=$AFDO_PROFILE"

         # 设置一些通用参数（便于后续维护）
         export KCFLAGS="-Wno-error -fauto-profile=$AFDO_PROFILE"
         export MAKE_ARGS="LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CC=clang \
         RUSTC=../../prebuilts/rust/linux-x86/1.73.0b/bin/rustc \
         PAHOLE=../../prebuilts/kernel-build-tools/linux-x86/bin/pahole \
         LD=ld.lld HOSTLD=ld.lld O=out SOURCE_DATE_EPOCH=${SOURCE_DATE_EPOCH}"

         # 进入源码目录
         cd kernel_workspace/kernel_platform/common

         # 执行 defconfig
         make -j$(nproc) $MAKE_ARGS gki_defconfig

         # 编译全部目标
         make -j$(nproc) $MAKE_ARGS all

         # 创建输出目录并复制 Image
         mkdir -p ../dist
         cp out/arch/arm64/boot/Image ../dist/

      - name: 验证内核构建时间
        run: |
         strings kernel_workspace/kernel_platform/common/out/vmlinux | grep "UTC"

      - name: Prepare AnyKernel3 package
        run: |
          cd kernel_workspace/kernel_platform/dist
          git clone https://github.com/3620603660/AnyKernel3.git AnyKernel3 --depth=1
          rm -rf AnyKernel3/.git
          rm -f AnyKernel3/push.sh
          cp Image AnyKernel3/

      - name: Upload AnyKernel3 artifact
        uses: actions/upload-artifact@v4
        with:
          name: AnyKernel3_oneplus_ace5pro_${{ env.KSUVER }}_ksun
          path: kernel_workspace/kernel_platform/dist/AnyKernel3/*
