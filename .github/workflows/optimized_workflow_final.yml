name: ace5pro_kernel_build
# 工作流触发条件：保持原始形式不变，手动触发，支持多种自定义参数
on:
  workflow_dispatch:
    inputs:
      CPU_ARCH:
        description: "目标CPU架构分支，例如 sm8750 (默认: sm8750)"
        required: true
        default: 'sm8750'
      DEVICE_CONFIG:
        description: "设备配置文件名称，例如 oneplus_ace5_pro (默认: oneplus_ace5_pro)"
        required: true
        default: 'oneplus_ace5_pro'
      ANDROID_TARGET_VERSION:
        description: "目标Android版本，例如 android15 (默认: android15)"
        required: true
        default: 'android15'
      KERNEL_BASE_VERSION:
        description: "内核基础版本，例如 6.6 (默认: 6.6)"
        required: true
        default: '6.6'
      CUSTOM_KERNEL_NAME_TAG:
        description: "自定义内核名称标识，将附加到内核版本号后 (例如: -android15-8-g013ec21bba94-abogki383916444)"
        required: true
        default: '-android15-8-g013ec21bba94-abogki383916444-4k'
      LOCAL_VERSION_SUFFIX:
        description: '内核版本后缀（如-v8，默认：-4k）'
        required: false
        default: ''
        type: string
      REMOVE_DEFAULT_4K_SUFFIX:
        description: '是否删除默认的 -4k 后缀？（勾选则删除）'
        required: false
        default: true
        type: boolean
      BUILD_TIMESTAMP:
        description: '内核构建时间 (UTC格式，例如 "Tue Dec 17 23:36:49 UTC 2024")'
        required: false
        default: 'Tue Dec 17 23:36:49 UTC 2024'
        type: string

# 构建任务定义
jobs:
  build:
    runs-on: ubuntu-latest
    
    # 环境变量配置：优化编译缓存和性能
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      TOKEN: ${{ secrets.TOKEN }}
    
    steps:
      # ========================================
      # 阶段一：环境准备和空间优化
      # ========================================
      
      # 最大化构建空间：删除不必要的预装软件
      - name: 1.1 最大化构建空间
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192      # 为根分区保留8GB空间
          temp-reserve-mb: 2048      # 为临时文件保留2GB空间
          remove-dotnet: 'true'      # 删除.NET运行时
          remove-android: 'true'     # 删除Android SDK
          remove-haskell: 'true'     # 删除Haskell编译器
          remove-codeql: 'true'      # 删除CodeQL分析工具
          
      # 配置Git用户信息
      - name: 1.2 配置Git用户信息
        run: |
         git config --global user.name "github-actions[bot]"
         git config --global user.email "github-actions[bot]@users.noreply.github.com"

      # 检出仓库代码
      - name: 1.3 检出工作流仓库代码  
        uses: actions/checkout@v4  

      # 安装构建依赖包
      - name: 1.4 安装构建核心依赖  
        run: |  
         sudo apt-get update  
         sudo apt-get install -y --no-install-recommends python3 git curl ccache libelf-dev build-essential

      # ========================================
      # 阶段二：编译缓存配置
      # ========================================
      
      # 恢复ccache缓存以加速编译
      - name: 2.1 恢复 ccache 缓存
        uses: actions/cache@v4
        with:
         path: /home/runner/.ccache
         key: ${{ runner.os }}-${{ github.repository }}-${{ github.ref_name }}-v2_ksun
         restore-keys: |
          ${{ runner.os }}-${{ github.repository }}-${{ github.ref_name }}-ccache-
          ${{ runner.os }}-${{ github.repository }}-ccache-
          ${{ runner.os }}-ccache-
    
      # 设置ccache环境变量以优化编译性能
      - name: 2.2 配置 ccache
        run: |  
         echo "CCACHE_DIR=/home/runner/.ccache" >> $GITHUB_ENV  
         echo "CCACHE_MAXSIZE=8G" >> $GITHUB_ENV  
         echo "CCACHE_COMPILERCHECK=%compiler% -dumpmachine; %compiler% -dumpversion" >> $GITHUB_ENV  
         echo "CCACHE_NOHASHDIR=true" >> $GITHUB_ENV  
         echo "CCACHE_HARDLINK=true" >> $GITHUB_ENV  
         echo "CCACHE_BASEDIR=${{ github.workspace }}" >> $GITHUB_ENV  
         echo "CCACHE_LOGFILE=${{ github.workspace }}/ccache.log" >> $GITHUB_ENV  
         echo "/usr/lib/ccache" >> $GITHUB_PATH  
         
      - name: Show ccache stats
        run: |
         ccache -s || true
         
      # ========================================
      # 阶段三：内核源码获取
      # ========================================
      
      # 安装repo工具用于管理多个Git仓库
      - name: 3.1 安装 repo 工具
        run: |
         curl -sSL https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
         chmod a+x ~/repo
         sudo mv ~/repo /usr/local/bin/repo

      # 初始化并同步内核源码仓库
      - name: 3.2 初始化并同步内核源码
        run: |
         mkdir -p kernel_workspace && cd kernel_workspace
         # 使用 --depth=1 以加快同步速度，因为我们假设源码已是合并好的状态
         repo init -u https://github.com/3620603660/kernel_manifest.git -b refs/heads/oneplus/${{ github.event.inputs.CPU_ARCH }} -m ${{ github.event.inputs.DEVICE_CONFIG }}.xml --depth=1
         repo sync -c -j$(nproc) --no-tags --no-clone-bundle
         # 清理可能导致编译问题的ABI导出文件
         rm -f kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports to remove."
         rm -f kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports to remove."
         
      # ========================================
      # 阶段四：KernelSU Next集成
      # ========================================
      
      # 设置KernelSU Next：下一代内核级Root解决方案
      - name: 4.1 设置 KernelSU Next
        run: |
          cd kernel_workspace/kernel_platform
          curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -s next
          cd KernelSU-Next
          # 计算KSU版本号
          KSU_VERSION=$(expr $(/usr/bin/git rev-list --count HEAD) "+" 10200)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          sed -i "s/DKSU_VERSION=11998/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile

      # ========================================
      # 阶段五：SUSFS和补丁应用
      # ========================================
      
      # 设置SUSFS（SU文件系统隐藏）并应用各种性能补丁
      - name: 5.1 设置 SUSFS & 应用补丁
        run: |
         set -e
         cd kernel_workspace
         git clone --depth=1 https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${{ inputs.ANDROID_TARGET_VERSION }}-${{ inputs.KERNEL_BASE_VERSION }}
         git clone --depth=1 https://github.com/SukiSU-Ultra/SukiSU_patch.git
         git clone --depth=1 https://$TOKEN@github.com/3620603660/boot.git
         git clone --depth=1 https://github.com/WildPlusKernel/kernel_patches.git
         git clone --depth=1 https://github.com/3620603660/GKI_KernelSU_SUSFS.git zzh_patch
         
         cd kernel_platform
         cp -f ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_TARGET_VERSION }}-${{ github.event.inputs.KERNEL_BASE_VERSION }}.patch ./common/ || true
         cp -f ../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./KernelSU-Next/ || true
         cp -f ../zzh_patch/next-patch/* ./KernelSU-Next/ || true
         cp -f ../susfs4ksu/kernel_patches/fs/* ./common/fs/ || true
         cp -f ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/ || true
         cp -f ../boot/1.patch ./common/ || true
         
         cd ./KernelSU-Next
         patch -p1 --forward --fuzz=3 < 10_enable_susfs_for_ksu.patch || true
         patch -p1 --fuzz=3 --forward < apk_sign.patch || true
         patch -p1 --fuzz=3 --forward < core_hook.patch || true
         patch -p1 --fuzz=3 --forward < ksud.patch || true
         patch -p1 --fuzz=3 --forward < selinux.patch || true
         patch -p1 --fuzz=3 --forward < rules.c.patch || true
         patch -p1 --fuzz=3 --forward < sucompat.c.patch || true
         patch -p1 --fuzz=3 --forward < kernel_compat.c.patch || true
         patch -p1 --fuzz=3 --forward < min_scope_syscall_hooks_v1.4.patch || true
         cd ../
         
         cd ./common/
         patch -p1 < 50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_TARGET_VERSION }}-${{ github.event.inputs.KERNEL_BASE_VERSION }}.patch || true
         cp -f ../../kernel_patches/69_hide_stuff.patch ./
         cp -f ../../kernel_patches/next/scope_min_manual_hooks_v1.4.patch ./
         patch -p1 -F 3 < scope_min_manual_hooks_v1.4.patch || true
         patch -p1 -F 3 < 69_hide_stuff.patch || true
         patch -s -p1 -F 3 < 1.patch || true
         echo "✅ SUSFS 和 scope_min_manual_hooks_v1.4 patch 应用完成"

         # 修复KernelSU Next兼容性问题
         sed -i '/^static inline int ksu_access_ok/,/^}/ s/^/\/\//' drivers/kernelsu/kernel_compat.c || true
         
      # ========================================
      # 阶段六：内核配置优化
      # ========================================
      
      # 添加SUSFS和性能优化配置
      - name: 6.1 添加 SUSFS 及性能优化配置
        run: |
          cd kernel_workspace/kernel_platform
          
          # ========================================
          # KernelSU和SUSFS基础配置
          # ========================================
          echo "CONFIG_KSU=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_KPROBES_HOOK=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          
          # SUSFS功能配置
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./common/arch/arm64/configs/gki_defconfig
          
          # ========================================
          # 编译器优化配置
          # ========================================
          echo "CONFIG_LTO_CLANG=y" >> ./common/arch/arm64/configs/gki_defconfig          # 启用Clang LTO优化
          echo "CONFIG_LTO_CLANG_THIN=y" >> ./common/arch/arm64/configs/gki_defconfig     # 启用Thin LTO
          echo "CONFIG_LTO_POLLY=y" >> ./common/arch/arm64/configs/gki_defconfig

          # ========================================
          # 压缩算法优化配置
          # ========================================
          echo "CONFIG_CRYPTO_LZ4HC=y" >> ./common/arch/arm64/configs/gki_defconfig       # 启用LZ4HC压缩        # 启用LZ4K压缩
          echo "CONFIG_CRYPTO_LZ4KD=y" >> ./common/arch/arm64/configs/gki_defconfig       # 启用LZ4KD压缩
          echo "CONFIG_CRYPTO_ZSTD=y" >> ./common/arch/arm64/configs/gki_defconfig        # 启用ZSTD压缩
          echo "CONFIG_CRYPTO_LZ4=y" >> ./common/arch/arm64/configs/gki_defconfig         # 启用LZ4压缩

          echo "CONFIG_F2FS_FS_LZ4=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_F2FS_FS_LZ4HC=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_F2FS_FS_ZSTD=y" >> ./common/arch/arm64/configs/gki_defconfig

          # 禁用defconfig检查以允许自定义配置
          sed -i 's/check_defconfig//' ./common/build.config.gki
          git add -A && git commit -a -m "BUILD Kernel"

      # ========================================
      # 阶段七：内核版本和名称配置
      # ========================================
      
      # 修改内核版本显示名称
      - name: 7.1 修改内核版本显示名称
        run: |
         cd kernel_workspace/kernel_platform
         sed -i '186s|echo ".*"|echo "${KERNELVERSION}${scm_version}${config_localversion}"|' common/scripts/setlocalversion
         sed -i "s/\${scm_version}/${{ github.event.inputs.CUSTOM_KERNEL_NAME_TAG }}/g" ./common/scripts/setlocalversion
         
      # 设置内核本地版本后缀
      - name: 7.2 设置 CONFIG_LOCALVERSION
        run: |
         cd kernel_workspace/kernel_platform
         echo 'CONFIG_LOCALVERSION="${{ github.event.inputs.LOCAL_VERSION_SUFFIX }}"' >> ./common/arch/arm64/configs/gki_defconfig

      # 根据用户选择删除默认的-4k后缀
      - name: 7.3 删除 CONFIG_LOCALVERSION 中的 -4k 后缀（如果勾选）
        if: ${{ fromJSON(github.event.inputs.REMOVE_DEFAULT_4K_SUFFIX) }}
        run: |
         cd kernel_workspace/kernel_platform
         sed -i 's/-4k//' ./common/arch/arm64/configs/gki_defconfig
    
      # ========================================
      # 阶段八：高级调度器集成 (注释掉，因为原始脚本中也是注释的)
      # ========================================
      
      # 拉取并集成sched_ext扩展调度器
      # - name: 拉取并集成 sched_ext 调度器
      #   run: |
      #    cd kernel_workspace/kernel_platform/
      #    git clone https://github.com/3620603660/sched_ext.git
      #    cp -r ./sched_ext/* ./common/kernel/sched
      #    rm -rf ./sched_ext/.git

      # 拉取AFDO（AutoFDO）性能优化配置文件
      - name: 拉取afdo
        run: |
          cd kernel_workspace/kernel_platform/
          git clone https://github.com/PxxPei/afdo.git

      # ========================================
      # 阶段九：构建时间戳设置
      # ========================================
      # 设置固定的构建时间戳以确保可重现构建
      - name: 9.1 设置构建时间戳
        run: |         
         export SOURCE_DATE_EPOCH=$(date -d "${{ github.event.inputs.BUILD_TIMESTAMP }}" +%s)
         echo "SOURCE_DATE_EPOCH=$SOURCE_DATE_EPOCH" >> $GITHUB_ENV

      # ========================================
      # 阶段十：内核编译 (已修正)
      # ========================================
      - name: 10.1 编译内核
        run: |
          # 1. 设置环境变量
          export CLANG_PATH="${{ github.workspace }}/clang19/bin"
          export PATH="${CLANG_PATH}:${PATH}"
          export PATH="/usr/lib/ccache:${PATH}"
          
          export KERNEL_TIME="${{ github.event.inputs.kernel_time }}"
          export KBUILD_BUILD_TIMESTAMP="$KERNEL_TIME"
          export SOURCE_DATE_EPOCH=$(date -d "$KERNEL_TIME" +%s )
          
          export CC="ccache clang"
          
          export MAKE_ARGS="LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- \
          RUSTC=../../prebuilts/rust/linux-x86/1.73.0b/bin/rustc \
          PAHOLE=../../prebuilts/kernel-build-tools/linux-x86/bin/pahole \
          LD=ld.lld HOSTLD=ld.lld SOURCE_DATE_EPOCH=${SOURCE_DATE_EPOCH}"
          
          # 2. 进入源码目录并清理
          cd kernel_workspace/kernel_platform/common
          rm -rf out
          
          # 3. 内核配置流程
          echo "⚙️ (1/3) 应用基础 GKI 配置..."
          make O=out ${MAKE_ARGS} gki_defconfig
          
          PATCH_CONFIG_ADDON="${{ github.workspace }}/kernel_workspace/SukiSU_patch/configs/gki_defconfig_addon"
          if [ -f "$PATCH_CONFIG_ADDON" ]; then
              echo "⚙️ (2/3) 应用 SukiSU 补丁配置..."
              cat "$PATCH_CONFIG_ADDON" >> out/.config
              make O=out ${MAKE_ARGS} olddefconfig
          fi
          
          echo "⚙️ (3/3) 启用 ThinLTO 配置..."
          scripts/config --file out/.config --enable LTO_CLANG_THIN
          make O=out ${MAKE_ARGS} olddefconfig
          
          # 4. 设置最终编译标志
          export KBUILD_CFLAGS="-O2 -flto=thin"
          
          AFDO_PROFILE="${{ github.workspace }}/kernel_workspace/kernel_platform/common/android/gki/aarch64/afdo/kernel.afdo"
          if [ -f "$AFDO_PROFILE" ]; then
            echo "✅ 启用 AutoFDO 优化: $AFDO_PROFILE"
            export KCFLAGS="-Wno-error -fauto-profile=${AFDO_PROFILE}"
          else
            echo "ℹ️ 未找到 AutoFDO Profile，跳过。"
            export KCFLAGS="-Wno-error"
          fi
          
          # 5. 执行编译
          echo "🚀 开始最终编译..."
          make O=out -j$(nproc --all) ${MAKE_ARGS} all
          
          # 6. 创建输出目录并复制 Image
          mkdir -p ../dist
          cp out/arch/arm64/boot/Image ../dist/
          
      - name: 10.2 验证内核构建时间
        run: |
         strings kernel_workspace/kernel_platform/common/out/vmlinux | grep "UTC"

      # ========================================
      # 阶段十一：打包与发布
      # ========================================
      
      - name: 11.1 准备 AnyKernel3 刷机包
        run: |
          cd kernel_workspace/kernel_platform/dist
          git clone https://github.com/egcd123/AnyKernel3.git AnyKernel3 --depth=1
          rm -rf AnyKernel3/.git
          rm -f AnyKernel3/push.sh
          cp Image AnyKernel3/

      - name: 11.2 上传编译产物到 Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: AnyKernel3_${{ github.event.inputs.DEVICE_CONFIG }}_${{ env.KSUVER }}
          path: kernel_workspace/kernel_platform/dist/AnyKernel3/*

